generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  messages      Message[]
  groupMembers  GroupMember[]
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Group {
  id        String   @id @default(uuid())
  name      String
  icon      String
  lastMessage String
  createdAt DateTime @default(now())
  members   GroupMember[]
  messages  Message[]

  @@map("groups")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("messages")
}

model GroupMember {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId  String

  @@unique([userId, groupId])
}

model Match {
  id          String   @id @default(uuid())
  teamA       String
  teamB       String
  scoreA      Int      @default(0)
  scoreB      Int      @default(0)
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("matches")
}

model Event {
  id        String   @id @default(uuid())
  matchId   String
  match     Match    @relation(fields: [matchId], references: [id])
  type      String   // "kill", "plant", etc.
  message   String
  createdAt DateTime @default(now())

  @@map("events")
}

